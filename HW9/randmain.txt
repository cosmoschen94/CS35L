#include "randcpuid.h"
#include <dlfcn.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <errno.h>
//#include <cpuid.h>

/* Main program, which outputs N bytes of random data.  */
int
main (int argc, char **argv)
{
  /* Check arguments.  */
  bool valid = false;
  long long nbytes;
  if (argc == 2)
    {
      char *endptr;
      errno = 0;
      nbytes = strtoll (argv[1], &endptr, 10);
      if (errno)
	perror (argv[1]);
      else
	valid = !*endptr && 0 <= nbytes;
    }
  if (!valid)
    {
      fprintf (stderr, "%s: usage: %s NBYTES\n", argv[0], argv[0]);
      return 1;
    }

  /* If there's no work to do, don't worry about which library to use.  */
  if (nbytes == 0)
    return 0;

  /* MODIFICATION Begins*/
  void *handle;
  char *error;

  /* Now that we know we have work to do, arrange to use the
     appropriate library.  */
  void (*initialize) (void);
  unsigned long long (*rand64) (void);
  void (*finalize) (void);
  if (rdrand_supported ())
    {
      handle = dlopen("randlibhw.so", RTLD_LAZY );
      if(!handle){
	//printf("dlopen randlibhw.so error");
	fputs(dlerror(), stderr);
	exit(1);
      }
      
      initialize = dlsym(handle, "hardware_rand64_init");
      if ((error = dlerror()) != NULL){
	//printf("dlsym hardware_rand64_init error");
	 fputs(dlerror(), stderr);
	 exit(1);
      }
	
      rand64 = dlsym(handle, "hardware_rand64");
      if ((error = dlerror()) != NULL){
	//printf("dlsym hardware_rand64 error");
	fputs(dlerror(), stderr);
	exit(1);
      }

      finalize = dlsym(handle, "hardware_rand64_fini");
      if ((error = dlerror()) != NULL){
	//printf("dlsym hardware_rand64_fini error");
	fputs(dlerror(), stderr);
	exit(1);
      }
    }
  else
    {
      handle = dlopen("randlibsw.so", RTLD_LAZY );
      if(!handle){
	//printf("dlopen randlibsw.so error");
	fputs(dlerror(), stderr);
	exit(1);
      }
      
      initialize = dlsym(handle, "software_rand64_init");
      if ((error = dlerror()) != NULL){
	//printf("dlsym software_rand64_init error");
	fputs(dlerror(), stderr);
	exit(1);
      }

      rand64 = dlsym(handle, "software_rand64");
      if ((error = dlerror()) != NULL){
	//printf("dlsym software_rand64 error");
	fputs(dlerror(), stderr);
	exit(1);
      }
      
      finalize = dlsym(handle, "software_rand64_fini");
      if ((error = dlerror()) != NULL){
	//printf("dlsym software_rand64_fini error");
	fputs(dlerror(), stderr);
	exit(1);
      }
    }

  //initialize ();
  int wordsize = sizeof rand64 ();
  int output_errno = 0;

  do
    {
      unsigned long long x = rand64 ();
      size_t outbytes = nbytes < wordsize ? nbytes : wordsize;
      if (fwrite (&x, 1, outbytes, stdout) != outbytes)
	{
	  output_errno = errno;
	  break;
	}
      nbytes -= outbytes;
    }
  while (0 < nbytes);

  if (fclose (stdout) != 0)
    output_errno = errno;

  if (output_errno)
    {
      errno = output_errno;
      perror ("output");
      finalize ();
      return 1;
    }

  //finalize ();

  /* dlclose */
  if (dlclose(handle) != 0){
    //printf("dlclose error");
    fputs(dlerror(), stderr);
    exit(1);
  }
  
  return 0;
}
